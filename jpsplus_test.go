package jps_plus

import (
	"fmt"
	"strings"
	"testing"
)

var grid [][]uint8

var trans = map[uint8]string{
	0: ".",
	1: "X",
	2: "o",
}

var world48X49 = `
.X..........................XX...................
............................XX...................
........X..........XX.......XX...................
.......XXX........XX........XXX..................
........XX.......XX..........XX..................
.......XX.......XX...........XX..................
...............XX............XX..................
..............XX.............XXX.................
.............XX...............XX.................
.............XX...............XX...X.............
............XX......................X............
...........XX........................X...........
..........XX................XX........X..........
.........XX.................XX.........X.........
............................XX..........X........
...........................XX............X.......
...........................XX.............X......
...........................XX..............X.....
...........................XX...............X....
..........................XX.................X...
..............................................X..
...............................................X.
............................XX...................
............................XX...................
........X..........XX.......XX...................
.......XXX........XX........XX...................
........XX.......XX..........XX..................
.......XXXX.....XX...............................
...............XX............XX..................
..............XX..............XX.................
.............XX................XXXX..............
............XX................XX..XX.............
...........XX.................XX...XX............
..........XX.................XX.....XX...........
.........XX.................XX.......XX..........
........XX..................XX........XX.........
............................XX.........XX........
...........................XX...........XX.......
...........................XX............XX......
...........................XX.............XX.....
...........................XX..............XX....
..........................XX................XX...
.............................................XX..
..............................................XX.
...........................XX............XX...XXX
...........................XX.............XX.....
...........................XX..............XX....
..........................XX................XX...
.............................................XX..
..............................................XX.
`

var world5X10 = `
..X...X..
......X..
.XX...XX.
..X......
..X...X..
`

var (
	m5X10  AStarMatrix
	m48X49 AStarMatrix
)

func copyGrid() [][]uint8 {
	temp := make([][]uint8, len(grid))
	copy(temp, grid)
	for i, v := range grid {
		copy(temp[i], v)
	}
	return temp
}

func TestMain(t *testing.M) {
	for _, row := range strings.Split(strings.TrimSpace(world48X49), "\n") {
		r := make([]uint8, 0, len(row))
		for _, raw := range row {
			n := 0
			if raw == 'X' {
				n = 1
			}
			r = append(r, uint8(n))
		}
		grid = append(grid, r)
	}
	m48X49 = NewMatrix(grid)
	grid = [][]uint8{}
	for _, row := range strings.Split(strings.TrimSpace(world5X10), "\n") {
		r := make([]uint8, 0, len(row))
		for _, raw := range row {
			n := 0
			if raw == 'X' {
				n = 1
			}
			r = append(r, uint8(n))
		}
		grid = append(grid, r)
	}
	m5X10 = NewMatrix(grid)
	t.Run()
}

func TestJump(t *testing.T) {
	// "o" is the jump path
	path, err := m48X49.AStarJump([2]int64{0, 0}, [2]int64{49, 48})
	if err != nil {
		panic(err)
	}
	temp := copyGrid()
	for _, node := range path {
		temp[node.GetRow()][node.GetCol()] = 2
	}
	for _, v := range temp {
		for _, vv := range v {
			fmt.Printf("%s ", trans[vv])
		}
		fmt.Println()
	}
}

func BenchmarkJumpPlus5x10(b *testing.B) {
	b.ResetTimer()
	start := [2]int64{0, 0}
	end := [2]int64{0, 7}
	for i := 0; i < b.N; i++ {
		_, _ = m5X10.AStarJump(start, end)
	}
}

func BenchmarkJumpPlus48X49(b *testing.B) {
	b.ResetTimer()
	start := [2]int64{0, 0}
	end := [2]int64{49, 48}
	for i := 0; i < b.N; i++ {
		_, _ = m48X49.AStarJump(start, end)
	}
}
